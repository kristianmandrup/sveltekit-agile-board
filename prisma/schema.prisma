// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

model User {
  id              String    @id @unique
  auth_session    Session[]
  auth_key        Key[]
  name            String
  username        String    @unique
  github_username String    @unique
  role            Roles     @relation(fields: [roleId], references: [id])
  roleId          Int
  projects        Project[]
  UserProfile     Profile[]
  Member          Member[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Skill {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String
  profile       Profile? @relation(fields: [userProfileId], references: [id])
  userProfileId Int?
}

model Profile {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id])
  description     String
  skills          Skill[]
  member          Member[]
  techPreferences String
  workStyle       String
  profileImage    String
  user_id         String

  @@index([user_id])
  @@map("UserProfile")
}

model Roles {
  id   Int    @id @default(autoincrement())
  name String @unique
  user User[]
}

model Project {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  motivation  String
  targetUsers String
  phase       String
  teams       Team[]
  user        User?  @relation(fields: [user_id], references: [id])
  user_id     String

  @@index([user_id])
}

model Team {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String
  responsibilityArea String
  projectId          Int
  project            Project  @relation(fields: [projectId], references: [id])
  members            Member[]
  tasks              Task[]
}

model Member {
  id          Int           @id @default(autoincrement())
  name        String
  role        String
  teamId      Int
  team        Team          @relation(fields: [teamId], references: [id])
  tasks       Task[]
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  Deliverable Deliverable[]
  Profile     Profile?      @relation(fields: [profileId], references: [id])
  profileId   Int?
}

model Task {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  status       String
  startDate    DateTime
  endDate      DateTime
  teamId       Int
  team         Team          @relation(fields: [teamId], references: [id])
  assigneeId   Int
  assignee     Member        @relation(fields: [assigneeId], references: [id])
  deliverables Deliverable[]
}

model Deliverable {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  dateCreated DateTime
  member      Member   @relation(fields: [memberId], references: [id])
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id])
  memberId    Int
}
