// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

model AuthUser {
  id           String        @id @unique
  name         String
  username     String        @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]
  role         Roles         @relation(fields: [roleId], references: [id])
  roleId       Int
  projects     Project[]
  UserProfile  UserProfile[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Skill {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  description   String
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId Int?
}

model UserProfile {
  id              Int      @id @default(autoincrement())
  user            AuthUser @relation(fields: [authUserId], references: [id])
  description     String
  skills          Skill[]
  member          Member[]
  techPreferences String
  workStyle       String
  profileImage    String
  authUserId      String
}

model Roles {
  id   Int        @id @default(autoincrement())
  name String     @unique
  user AuthUser[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  motivation  String
  targetUsers String
  phase       String
  teams       Team[]
  user        AuthUser? @relation(fields: [authUserId], references: [id])
  authUserId  String?
}

model Team {
  id                 Int      @id @default(autoincrement())
  name               String
  responsibilityArea String
  projectId          Int
  project            Project  @relation(fields: [projectId], references: [id])
  members            Member[]
  tasks              Task[]
}

model Member {
  id            Int          @id @default(autoincrement())
  name          String
  role          String
  teamId        Int
  team          Team         @relation(fields: [teamId], references: [id])
  tasks         Task[]
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId Int?
}

model Task {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  status       String
  startDate    DateTime
  endDate      DateTime
  teamId       Int
  team         Team          @relation(fields: [teamId], references: [id])
  assigneeId   Int
  assignee     Member        @relation(fields: [assigneeId], references: [id])
  deliverables Deliverable[]
}

model Deliverable {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  dateCreated DateTime
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id])
}
